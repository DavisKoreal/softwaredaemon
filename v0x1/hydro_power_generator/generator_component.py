import adsk.core, adsk.fusion, adsk.cam\n\ndef create_generator():\n    app = adsk.core.Application.get()\n    design = app.activeProduct\n    rootComp = design.rootComponent\n    \n    # Create generator stator\n    sketches = rootComp.sketches\n    xyPlane = rootComp.xYConstructionPlane\n    sketch = sketches.add(xyPlane)\n    \n    # Draw stator profile (simplified circle for example)\n    circles = sketch.sketchCurves.sketchCircles\n    circles.addByCenterRadius(adsk.core.Point3D.create(0, 0, 0), 8.0)\n    circles.addByCenterRadius(adsk.core.Point3D.create(0, 0, 0), 6.0)\n    \n    # Extrude to create 3D stator\n    extrudes = rootComp.features.extrudeFeatures\n    prof = sketch.profiles.item(1)\n    extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)\n    distance = adsk.core.ValueInput.createByReal(3.0)\n    extInput.setDistanceExtent(False, distance)\n    extrudes.add(extInput)\n    \n    # Create rotor (simplified cylinder for example)\n    sketch = sketches.add(xyPlane)\n    circles = sketch.sketchCurves.sketchCircles\n    circles.addByCenterRadius(adsk.core.Point3D.create(0, 0, 0), 5.0)\n    \n    # Extrude rotor\n    prof = sketch.profiles.item(0)\n    extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)\n    distance = adsk.core.ValueInput.createByReal(3.0)\n    extInput.setDistanceExtent(False, distance)\n    extrudes.add(extInput)\n    \n    return 'Generator component created successfully'\n\nif __name__ == '__main__':\n    create_generator()
