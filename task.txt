generate a txt file which is a report for a farmers app that enables farmers to 
1. take pictures of crop diseases and pests and upload
2. get ai recommended feedback on the uploaded photos 
3. connect farmers to store owners with farm inputs adressing their current state

Be detailed. Divide the report into subsections. For each section, add more information and show real world examples. 
Show the target users

the file should based on the following skeleton

Table of Contents  
Executive Summary  

Problem Statement  

Why This Solution Fits the Problem  

Introduction  

System Features  

System Architecture  

User Roles and Permissions  

System Workflows  

Technologies Used  

Security Considerations  

Future Enhancements  

Real-World Comparisons  

Target Users  

Conclusion  

Appendix

1. Executive Summary
The Farmer AI Assistant App, branded as AgriGuide, is a web-based platform empowering smallholder farmers in Africa to manage crop health. Using OpenAI’s GPT-4o-mini for image-based pest and disease diagnostics, it delivers instant diagnoses, tailored recommendations, and connections to local agri-input suppliers via geolocation APIs. Built with Next.js, Prisma, Supabase, and TypeScript, AgriGuide ensures scalability, security, and accessibility. The system supports farmers, suppliers, consultants, and admins through role-based access, as seen in auth.ts. Drawing inspiration from PlantVillage Nuru and Kuzi, AgriGuide addresses crop losses and promotes sustainable farming practices.
2. Problem Statement
Smallholder farmers, producing 70% of global food, face barriers in managing crop health. Limited access to experts (1:1093 extension officer ratio in Kenya vs. 1:400 recommended, The Guardian), misdiagnoses, and ineffective treatments cause 20–40% annual crop losses ($220B globally, FAO). For example, Kenyan maize farmers lose 40% of yields to fall armyworm due to delayed interventions (CABI.org). AgriGuide tackles these challenges with AI-driven diagnostics and localized supplier connections.
3. Why This Solution Fits the Problem
AgriGuide addresses crop health challenges through:  
Accurate Diagnosis: OpenAI’s GPT-4o-mini (scanPestImage, scanDiseaseImage) analyzes images for precise pest/disease identification.  

Expert Guidance: Detailed AI-generated recommendations (e.g., organic controls, pesticide dosages) reduce reliance on ineffective treatments.  

Access to Resources: Geolocation APIs (useClientGeolocation, app/api/geolocation/route.ts) connect farmers to nearby suppliers.  

Scalability: Next.js and Supabase ensure a responsive, cloud-based platform accessible on low-cost devices.
Unlike PlantVillage Nuru, AgriGuide integrates supplier management and consultation services, offering a holistic solution.

4. Introduction
Agriculture is vital for food security, yet smallholder farmers in Africa face persistent crop health challenges. With 50% smartphone penetration in Kenya (GSMA 2024), web-based solutions like AgriGuide leverage browser accessibility to deliver AI diagnostics, expert advice, and market linkages. This report details AgriGuide’s features, architecture, and alignment with global agricultural innovations, supported by code in lib/actions.ts and lib/data.ts.
5. System Features
AgriGuide’s features, as defined in lib/data.ts, streamline crop health management.
5.1 Instant Diagnosis
Farmers upload crop images via forms validated by addPestFormSchema (lib/schemas.ts). The scanPestImage and scanDiseaseImage actions use OpenAI’s GPT-4o-mini to identify pests/diseases, returning detailed reports (e.g., pest name, damage, treatment).
Real-World Example: PlantVillage Nuru achieves 93% accuracy for cassava diseases (Axios).
5.2 Expert AI Recommendations
Post-diagnosis, AI generates tailored advice (e.g., organic controls, pesticide dosages) stored in Prisma (prisma.scan.create).
Real-World Example: AgriApp in India boosts yields by 20% with similar advice (AgriApp.com).
5.3 Supplier Links
The useClientGeolocation hook and app/api/geolocation/route.ts fetch location data to connect farmers to suppliers listed in TEMP_PRODUCT_DATA (e.g., fungicides in Nairobi).
Real-World Example: eKutir links farmers to suppliers in India (eKutir.in).
5.4 Comprehensive Database
Prisma stores pest/disease data (prisma.pest.create, prisma.disease.create), accessible via a resource library.
Implementation: Supabase stores images for scalability.
5.5 User-Friendly Interface
Next.js ensures a responsive, intuitive UI, with forms validated by Zod schemas (lib/schemas.ts).
Implementation: React hooks like useHashState enhance UX with error toasts.
5.6 Consultation Services
In-app chat (sendMessage) allows farmers to consult agricultural specialists using OpenAI.
Real-World Example: Darli Chatbot serves 110,000+ farmers via WhatsApp (news.mongabay.com).
5.7 Progress Tracker
The trackProgress action compares two scan images to assess disease progression, aiding proactive management.
Implementation: Uses OpenAI for image analysis.
6. System Architecture
AgriGuide’s architecture ensures modularity and scalability:  
Frontend: Next.js with React hooks (useGeolocation.ts, useHashState.ts) for dynamic UI.  

Backend: Next.js API routes (app/api/geolocation/route.ts) and server actions (lib/actions.ts).  

AI Service: OpenAI’s GPT-4o-mini for pest/disease analysis (scanPestImage).  

Database: Prisma for structured data (users, scans, products); Supabase for image storage.  

Geolocation: ipgeolocation.io and bigdatacloud.net APIs for supplier mapping.  

Authentication: NextAuth.js with Prisma adapter (auth.ts).  

Diagram: A flowchart (to be inserted) illustrates component interactions.
Real-World Example: PlantVillage uses a similar client-server model (WIRED).

7. User Roles and Permissions
Defined in auth.ts and enforced via Prisma’s Role enum:  
Customers (Farmers): Access diagnostics, recommendations, supplier links, and chat.  

Suppliers: Manage products (addProduct, editProduct) and view listings.  

Consultants: Provide expert advice via chat.  

Admins: Manage users, pests, diseases, and suppliers (deleteUser, approveSupplier).
Implementation: session.user.role ensures secure access control.

8. System Workflows
Key workflows, coded in lib/actions.ts, include:  
Diagnosis: Image upload → OpenAI analysis (scanPestImage) → Store in Supabase/Prisma → Display results.  

Supplier Connection: Geolocation fetch (useClientGeolocation) → API call (app/api/geolocation/route.ts) → Supplier list rendering.  

Product Management: Supplier submits product (addProduct) → Validates with addProductFormSchema → Stores in Prisma/Supabase.  

Progress Tracking: Compare images (trackProgress) → AI analysis → Return progress report.
Real-World Example: AgriApp’s diagnosis pipeline is similar (AgriApp.com).

9. Technologies Used
The stack, evident in the files, balances performance and accessibility:  
Next.js: Server-side rendering and API routes.  

TypeScript: Type safety with Zod schemas (lib/schemas.ts).  

OpenAI (GPT-4o-mini): AI image analysis (lib/actions.ts).  

Prisma: Database ORM (lib/prisma.ts).  

Supabase: Image storage (lib/supabase.ts).  

NextAuth.js: Authentication (auth.ts).  

Geolocation APIs: ipgeolocation.io and bigdatacloud.net (app/api/geolocation/route.ts).
Real-World Example: MobilePlantViT uses AI for plant diagnostics (arXiv).

10. Security Considerations
Security is embedded in the codebase:  
Authentication: NextAuth.js with Google/GitHub providers (auth.ts).  

Data Validation: Zod schemas ensure safe inputs (lib/schemas.ts).  

Storage: Supabase encrypts images; Prisma secures database access.  

Compliance: Aligns with GDPR and Kenya’s Data Protection Act.
Implementation: Regular audits are planned.

11. Future Enhancements
The codebase supports:  
Offline Mode: Cache AI models for poor connectivity.  

Multilingual Support: Add Swahili, Kikuyu via Next.js localization.  

Voice Commands: Integrate speech-to-text APIs.  

Predictive Analytics: Forecast outbreaks using historical scan data.  

Mobile App: Port to React Native for native mobile support.
Real-World Example: Kuzi predicts locust migrations (Wikipedia).

12. Real-World Comparisons
AgriGuide builds on:  
PlantVillage Nuru: 93% accurate cassava diagnosis (Axios).  

Kuzi: Locust alerts in East Africa (Wikipedia).  

AgriApp: 20% yield boost in India (AgriApp.com).
AgriGuide’s supplier integration and consultation services set it apart.

13. Target Users
The platform serves:  
Smallholder Farmers: Managing <5 acres, accessing diagnostics via browsers.  

Suppliers: Listing products like fungicides (TEMP_PRODUCT_DATA).  

Consultants: Offering expert advice.  

NGOs/Extension Services: Scaling outreach (110,000+ farmers use similar tools, news.mongabay.com).

14. Conclusion
AgriGuide transforms smallholder farming with AI diagnostics, supplier connectivity, and expert consultations. Its Next.js architecture, secure design, and future-ready features position it as a leader in agricultural innovation. Partnerships with NGOs and suppliers will amplify its impact.
15. Appendix
References:  
PlantVillage: https://plantvillage.psu.edu  

Kuzi: https://elicit.africa/kuzi  

AgriApp: https://agriapp.com  

CABI: https://cabi.org  

FAO: https://fao.org  

The Guardian, WIRED, news.mongabay.com, arXiv

Glossary:  
AI: Artificial Intelligence  

API: Application Programming Interface  

GDPR: General Data Protection Regulation

