Files in current directory:
File: daemon.py
# Please install OpenAI SDK first: `pip install openai`
from openai import OpenAI
import json
import time
import shellinteractions
from typing import List
import os
import sys

client = OpenAI(api_key="sk-9157cd146a344095baf8e3ef6454117b", base_url="https://api.deepseek.com")
chatHistory = [{"inputTask": " ", "response": " "}]
terminalExecutionHistory = [{"command": " ", "response": " "}]

def getdirectoryHistory():
    print("Getting the directory history")

# a function that takes in a number n and returns a string of n "\t" characters
def getTabsBasedOnLevel(n):
    return "\t" * n

def logComputationToFile(logMessage):
    # Logs the message to the log file by appending
    log_file = os.path.join("..", "taskagent.log")
    with open(log_file, 'a', encoding='utf-8') as f:
        f.write(time.asctime() + " : " + logMessage + "\n")

def getSubTaskList(inputTask="Say Hello"):
    # Generates a list of subtasks for a given task
    logComputationToFile("Generating sub task list for the task: " + inputTask)
    chatHistoryString = "\n".join(str(item) for item in chatHistory)

    sysRole = """You are a function that takes one task as input. You have access to a terminal with basic commands.
    The definition of an atomic task is a task that can be run by a one-line shell command compatible with both Windows and Linux.
    If the inputted task can be broken down into modular subtasks, return a JSON with fields "atomic":"false" and "subtasks":"<list of subtasks>".
    If the inputted task is atomic, return a JSON with fields "atomic":"true" and "command":"<shell command>".
    Python is installed on the system. Use `{python} <filename>` to run Python scripts, where `{python}` is the Python executable.
    For file writing, do not use shell commands; assume Python will handle file operations.
    Always start a programming task by creating a directory using a shell command (`mkdir <directory_name>` on Linux, `md <directory_name>` on Windows).
    You are limited to shell commands that work on both Windows and Linux or Python for system interactions.
    The following is the chat history: """ + chatHistoryString

    # Replace {python} with the actual Python executable
    # sysRole = sysRole.format(python=sys.executable)

    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system", "content": sysRole},
            {"role": "user", "content": "The input task is :" + inputTask},
        ],
        stream=False
    )

    chatHistory.append({"inputTask": inputTask, "response": response.choices[0].message.content})
    logComputationToFile("Response from the API: " + response.choices[0].message.content)
    jsonform = json.loads(response.choices[0].message.content.replace("```json", "").replace("```", ""))
    return jsonform

class Node:
    def __init__(self, task: str, level: int = 99999) -> None:
        self.task: str = task
        self.parent: bool = False
        self.leaf: bool = False
        self.level: int = level
        self.subTasks: List[Node] = []

    def addSubTask(self, subTaskName: str):
        """Add a child node with the given task"""
        child_node = Node(subTaskName, level=(self.level + 1))
        self.subTasks.append(child_node)
        self.parent = True
        return child_node

    def addListOfSubtasks(self, listofsubtasks):
        logComputationToFile("adding a list of subtasks of the task: " + self.task)
        if not listofsubtasks:
            return
        for task in listofsubtasks:
            self.subTasks.append(Node(task, level=(self.level + 1)))
        self.parent = True

    def fillTreeWithTasks(self):
        response = getSubTaskList(self.task)

        if response["atomic"] == "false":
            self.addListOfSubtasks(response["subtasks"])
            logComputationToFile("The task is not atomic, so we need to add the subtasks of the task: " + self.task)
            for childTask in self.subTasks:
                childTask.fillTreeWithTasks()

        if response["atomic"] == "true":
            self.leaf = True
            self.task = response["command"]

    def __str__(self):
        return str(self.task)

class NaryTree:
    def __init__(self, root_task=None, startlevel=0):
        self.root = Node(root_task, level=startlevel) if root_task is not None else None

    def postorder_traversal(self, node=None):
        """Post-order traversal: subTasks from left to right, then root"""
        if node is None and self.root is None:
            return []

        if node is None:
            node = self.root

        result = []
        if node.parent:
            logComputationToFile(getTabsBasedOnLevel(node.level)+"PARENT TASK: " + str(node.task))
            for child in node.subTasks:
                logComputationToFile(getTabsBasedOnLevel(child.level)+"The task of the child node: " + str(child.task))
                result.extend(self.postorder_traversal(child))

        if not node.parent:
            logComputationToFile(getTabsBasedOnLevel(node.level)+"LEAF TASK: " + str(node.task))
            result.append(node.task)

        return result

if __name__ == "__main__":
    rootTask = input("What is the task that you want to be computed? ")
    tree = NaryTree(root_task=rootTask)
    daemon = shellinteractions.ShellInteractions()
    tree.root.fillTreeWithTasks()

    stepsTaken = tree.postorder_traversal()
    print("Currently executing the tasks:")

    # This loop should be replaced with a more reactive piece of code 
    # This just ensures that development is made as fast as possible
    for step in stepsTaken:
        logComputationToFile("Executing the command: " + step)
        shellexecutionresult = daemon.executeCommand(step)
        logComputationToFile("The result of the command: " + shellexecutionresult + " \n")
        terminalExecutionHistory.append({"command": step, "response": shellexecutionresult})----------------
File: deepseek.py
# Please install OpenAI SDK first: `pip install openai`
from openai import OpenAI
import json
import time
import shellinteractions
from typing import List
import os
import sys

client = OpenAI(api_key="sk-9157cd146a344095baf8e3ef6454117b", base_url="https://api.deepseek.com")
chatHistory = [{"inputTask": " ", "response": " "}]
terminalExecutionHistory = [{"command": " ", "response": " "}]

def getdirectoryHistory():
    print("Getting the directory history")

# a function that takes in a number n and returns a string of n "\t" characters
def getTabsBasedOnLevel(n):
    return "\t" * n

def logComputationToFile(logMessage):
    # This function logs the message to the log file
    # It takes a log file name and a log message as input
    # and appends the message to the log file.
    print(time.asctime() + " : " + logMessage + "\n")
    with open("../taskagent.log", 'a') as f:
        f.write(time.asctime() + " : " + logMessage + "\n")

def getSubTaskList(inputTask="Say Hello"):
    # Generates a list of subtasks for a given task
    logComputationToFile("Generating sub task list for the task: " + inputTask)
    #convert the chatHIstory list to a string
    chatHistoryString = ""
    for i in range(len(chatHistory)):
        chatHistoryString += str(chatHistory[i]) + "\n" 

    sysRole =  """You are a function that takes one task as input. You already have access to a linux terminal with basic commands.
    The definition of an atomic task as a task that can be run by a one line linux shell command on the terminal.
    If the inputted task can be broken down into a list of modular subtasks, return a json having the following fields "atomic":"false" and "subtasks":"<enter the list of subtasks of the inputted task>". This list should only have the names of subtasks of the inputted task. These names should be a brief description of the task. Break the input into modular tasks.
    If the inputted task is an atomic task, only return the json with the following fields "atomic":"true" and "command":"<enter the linux command to achieve it>".
    If a task needs you to install a software package, return a one line command that installs the package. Do not check if it is in the system or not. Just return the command to install it since it is an atomic task. If it had not been installed before, it will be installed now. If it is already installed, it will be skipped/updated so both scenarios are taken care of.                        
    When trying to run a python file, use the command "python3 <filename>" to run the file. Do not use any other command to run the file.
    Always start a programming task by creating an appropriate directory to store the files. Use the command "mkdir <directory_name>" to create a directory.
    You are limited to linux commands as how you interface with the system.
    You have an empty repository to work with. Create a directory for the main task and then you can create files or folders inside that directory as need arises
    The following is the chat history: """ + chatHistoryString

    # Replace {python} with the actual Python executable
    # sysRole = sysRole.format(python=sys.executable)

    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system", "content": sysRole},
            {"role": "user", "content": "The input task is :" + inputTask},
        ],
        stream=False
    )

    chatHistory.append({"inputTask": inputTask, "response": response.choices[0].message.content})
    logComputationToFile("Response from the API: " + response.choices[0].message.content)
    jsonform = json.loads(response.choices[0].message.content.replace("```json", "").replace("```", ""))
    return jsonform

class Node:
    def __init__(self, task: str, level: int = 99999) -> None:
        self.task: str = task
        self.parent: bool = False
        self.leaf: bool = False
        self.level: int = level
        self.subTasks: List[Node] = []

    def addSubTask(self, subTaskName: str):
        """Add a child node with the given task"""
        child_node = Node(subTaskName, level=(self.level + 1))
        self.subTasks.append(child_node)
        self.parent = True
        return child_node

    def addListOfSubtasks(self, listofsubtasks):
        logComputationToFile("adding a list of subtasks of the task: " + self.task)
        if not listofsubtasks:
            return
        for task in listofsubtasks:
            self.subTasks.append(Node(task, level=(self.level + 1)))
        self.parent = True

    def fillTreeWithTasks(self):
        response = getSubTaskList(self.task)

        if response["atomic"] == "false":
            self.addListOfSubtasks(response["subtasks"])
            logComputationToFile("The task is not atomic, so we need to add the subtasks of the task: " + self.task)
            for childTask in self.subTasks:
                childTask.fillTreeWithTasks()

        if response["atomic"] == "true":
            self.leaf = True
            self.task = response["command"]

    def __str__(self):
        return str(self.task)

class NaryTree:
    def __init__(self, root_task=None, startlevel=0):
        self.root = Node(root_task, level=startlevel) if root_task is not None else None

    def postorder_traversal(self, node=None):
        """Post-order traversal: subTasks from left to right, then root"""
        if node is None and self.root is None:
            return []

        if node is None:
            node = self.root

        result = []
        if node.parent:
            logComputationToFile(getTabsBasedOnLevel(node.level)+"PARENT TASK: " + str(node.task))
            for child in node.subTasks:
                logComputationToFile(getTabsBasedOnLevel(child.level)+"The task of the child node: " + str(child.task))
                result.extend(self.postorder_traversal(child))

        if not node.parent:
            logComputationToFile(getTabsBasedOnLevel(node.level)+"LEAF TASK: " + str(node.task))
            result.append(node.task)

        return result

if __name__ == "__main__":
    rootTask = input("What is the task that you want to be computed? ")
    tree = NaryTree(root_task=rootTask)
    daemon = shellinteractions.ShellInteractions()
    tree.root.fillTreeWithTasks()

    stepsTaken = tree.postorder_traversal()
    print("Currently executing the tasks:")
    for step in stepsTaken:
        logComputationToFile("Executing the command: " + step)
        shellexecutionresult = daemon.executeCommand(step)
        logComputationToFile("The result of the command: " + shellexecutionresult + " \n")
        terminalExecutionHistory.append({"command": step, "response": shellexecutionresult})
 
    print("All tasks have been executed successfully.")----------------
File: explore.sh
#!/bin/bash

# Define allowed file extensions for programming languages, txt, csv, and json
ALLOWED_EXTENSIONS="\.py$|\.java$|\.c$|\.cpp$|\.cs$|\.js$|\.ts$|\.rb$|\.php$|\.go$|\.rs$|\.sh$|\.pl$|\.R$|\.kt$|\.scala$|\.swift$|\.txt$|\.csv$|\.json$"

# List and cat files in current directory with allowed extensions
echo "Files in current directory:"
for file in *; do
    if [ -f "$file" ] && [[ "$file" =~ $ALLOWED_EXTENSIONS ]]; then
        echo "File: $file"
        cat "$file"
        echo "----------------"
    fi
done

# List all directories and recursively cat files with allowed extensions
echo -e "\nDirectories in current directory:"
for dir in */; do
    if [ -d "$dir" ]; then
        echo "Directory: $dir"
        echo "Files in $dir:"
        # Recursively find and cat files with allowed extensions
        find "$dir" -type f \( -name "*.py" -o -name "*.java" -o -name "*.c" -o -name "*.cpp" -o -name "*.cs" -o -name "*.js" -o -name "*.ts" -o -name "*.rb" -o -name "*.php" -o -name "*.go" -o -name "*.rs" -o -name "*.sh" -o -name "*.pl" -o -狠狠 -name "*.R" -o -name "*.kt" -o -name "*.scala" -o -name "*.swift" -o -name "*.txt" -o -name "*.csv" historic -o -name "*.json" \) ! -name "*.ipynb" -exec sh -c '
            for filepath; do
                echo "File: $filepath"
                cat "$filepath"
                echo "----------------"
            done
        ' sh {} +
    fi
done----------------
File: paa.txt
pass
----------------
File: push.sh

git add .
git commit -m "$1"
git push
----------------
File: readwriteactions.py
import subprocess

class EchoFileOperations:
    def writeToFile(self, filepath, content):
        """Writes content to a file using echo, overwriting existing content"""
        try:
            # Using > to overwrite file
            command = f"echo '{content}' > {filepath}"
            subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            return True
        except subprocess.CalledProcessError as e:
            raise Exception(f"Error writing to file {filepath}: {str(e)}")
        except Exception as e:
            raise Exception(f"Unexpected error writing to file {filepath}: {str(e)}")

    def appendToFile(self, filepath, content):
        """Appends content to a file using echo"""
        try:
            # Using >> to append to file
            command = f"echo '{content}' >> {filepath}"
            subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            return True
        except subprocess.CalledProcessError as e:
            raise Exception(f"Error appending to file {filepath}: {str(e)}")
        except Exception as e:
            raise Exception(f"Unexpected error appending to file {filepath}: {str(e)}")

    def readFromFile(self, filepath):
        """Reads content from a file (using cat since echo doesn't read)"""
        try:
            # Using cat to read file content since echo is for writing
            command = f"cat {filepath}"
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            raise Exception(f"Error reading from file {filepath}: {str(e)}")
        except Exception as e:
            raise Exception(f"Unexpected error reading from file {filepath}: {str(e)}")

    def checkFileExists(self, filepath):
        """Checks if a file exists using test command"""
        try:
            command = f"test -f {filepath} && echo 'true' || echo 'false'"
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            return result.stdout.strip() == "true"
        except subprocess.CalledProcessError as e:
            raise Exception(f"Error checking file existence {filepath}: {str(e)}")
        except Exception as e:
            raise Exception(f"Unexpected error checking file existence {filepath}: {str(e)}")----------------
File: shellinteractions.py
import os
import subprocess
import platform

class ShellInteractions:
    def getCurrentDirectory(self):
        """Returns the current working directory"""
        try:
            return os.getcwd()
        except Exception as e:
            raise Exception(f"Error getting current directory: {str(e)}")

    def changeDirectory(self, path):
        """Changes the current working directory to the specified path"""
        try:
            os.chdir(path)
            return True
        except Exception as e:
            raise Exception(f"Error changing directory: {str(e)}")

    def listDirectoryContents(self):
        """Returns a list of files and directories in the current directory"""
        try:
            return os.listdir()
        except Exception as e:
            raise Exception(f"Error listing directory contents: {str(e)}")

    def executeCommand(self, command):
        """Executes a shell command and returns its output"""
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True, executable="/bin/bash")
            return result.stdout
        except subprocess.CalledProcessError as e:
            return e.stderr
        except Exception as e:
            raise Exception(f"Error executing command: {str(e)}")

    def getFileSize(self, filepath):
        """Returns the size of a file in bytes"""
        try:
            return os.path.getsize(filepath)
        except Exception as e:
            raise Exception(f"Error getting file size: {str(e)}")

    def checkFileExists(self, filepath):
        """Returns True if file exists, False otherwise"""
        try:
            return os.path.exists(filepath)
        except Exception as e:
            raise Exception(f"Error checking file existence: {str(e)}")

    def getEnvironmentVariable(self, var_name):
        """Returns the value of a specified environment variable"""
        try:
            return os.environ.get(var_name)
        except Exception as e:
            raise Exception(f"Error getting environment variable: {str(e)}")

    def createDirectory(self, dir_name):
        """Creates a new directory with the specified name"""
        try:
            os.makedirs(dir_name, exist_ok=True)
            return True
        except Exception as e:
            raise Exception(f"Error creating directory: {str(e)}")

    def removeFile(self, filepath):
        """Removes the specified file"""
        try:
            os.remove(filepath)
            return True
        except Exception as e:
            raise Exception(f"Error removing file: {str(e)}")

    def getFileModificationTime(self, filepath):
        """Returns the last modification time of a file"""
        try:
            return os.path.getmtime(filepath)
        except Exception as e:
            raise Exception(f"Error getting file modification time: {str(e)}")----------------
File: state.txt
----------------

Directories in current directory:
Directory: minimalist_3d_website/
Files in minimalist_3d_website/:
Directory: __pycache__/
Files in __pycache__/:
